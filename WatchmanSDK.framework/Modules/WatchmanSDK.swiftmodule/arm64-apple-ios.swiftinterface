// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.1 (swiftlang-1100.0.270.13 clang-1100.0.33.7)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -module-name WatchmanSDK
import CoreBluetooth.CBPeripheral
import CommonCrypto
import CoreBluetooth
import Foundation
import RxCocoa
import RxSwift
import Swift
import UIKit
import WDCommon
import WDConnectivity
import WDNetwork
@_exported import WatchmanSDK
public class DeviceConfiguration : WDCommon.DeviceConfiguration {
  override required public init(json: Swift.String)
  override public init(jsonDict: [Swift.String : WDCommon.AnyJSONType])
  override public init()
  @objc deinit
}
public class WDStreetType : Swift.Codable {
  final public let id: Swift.Int?
  final public let name: WatchmanSDK.WDTranslation?
  @objc deinit
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public class WDAssetType : Swift.Codable {
  final public let id: Swift.Int?
  final public let key: Swift.String?
  @objc deinit
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public class WDApiManager : WatchmanSDK.WDBaseManager {
  public static var shared: WatchmanSDK.WDApiManager?
  override public init()
  @available(*, deprecated, message: "Use new initializer public init()")
  public static func getSharedManager() -> WatchmanSDK.WDApiManager
  public func setCustomBaseUrl(baseUrl: Swift.String)
  @objc deinit
}
public class WDLoginManager : WatchmanSDK.WDBaseManager {
  public static var shared: WatchmanSDK.WDLoginManager?
  public var delegate: WatchmanSDK.WDLoginDelegate?
  override public init()
  public init(delegate: WatchmanSDK.WDLoginDelegate)
  @available(*, deprecated, message: "Use new initializer public init(delegate: WDLoginDelegate)")
  public static func getSharedManager(withDelegate: WatchmanSDK.WDLoginDelegate) -> WatchmanSDK.WDLoginManager
  public func checkLogin()
  public func setCustomOAuthToken(token: Swift.String)
  public func doLogin(withEmail: Swift.String, andPassword: Swift.String)
  public func closeSession()
  @objc deinit
}
public enum WDPRODUCT_ACTION : Swift.Int {
  case NONE
  case CLOSE
  case OPEN
  case ERROR
  case STOP
  case RELAY_1
  case RELAY_2
  case MOTOR
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
public class WDProduct : WDCommon.WDProduct {
  public var name: Swift.String?
  @available(*, deprecated, renamed: "productTypeKey")
  public var pt_key: Swift.String? {
    get
    set(newValue)
  }
  @available(*, deprecated, renamed: "configuration")
  public var deviceSettings: WDCommon.DeviceConfiguration? {
    get
    set(newValue)
  }
  public var productBgColor: UIKit.UIColor
  public var productState: Swift.String
  public var hasAccess: Swift.Bool
  public var hasFutureAccess: Swift.Bool
  public var gateway: WatchmanSDK.WDProduct?
  public var gateway_id: Swift.Int?
  override public init()
  public init(productId: Swift.Int, productName: Swift.String = "", productTypeKey: Swift.String, mac: Swift.String, assetId: Swift.Int?, configuration: WDCommon.DeviceConfiguration?, challengeSecret: Swift.String?, challengeSecret2: Swift.String?)
  public init(json: [Swift.String : Any], acc: [WatchmanSDK.WDAccess]?, at_key: Swift.String?)
  @available(*, deprecated, message: "use new constructor init(json: [String: Any], acc: [WDAccess], at_key: String?)")
  public func newProduct(json: [Swift.String : Any], acc: [WatchmanSDK.WDAccess], at_key: Swift.String?) -> WatchmanSDK.WDProduct
  public static func isWKnob(qr: Swift.String) -> Swift.Bool
  @available(*, deprecated, message: "User productType property instead")
  public func isWKnob() -> Swift.Bool
  public func hasLinkedGateway() -> Swift.Bool
  override public init(productId: Swift.Int, productTypeKey: Swift.String, mac: Swift.String, assetId: Swift.Int?, configuration: WDCommon.DeviceConfiguration?, challengeSecret: Swift.String?, challengeSecret2: Swift.String?)
  override public init(productId: Swift.Int, productTypeKey: Swift.String, mac: Swift.String, assetId: Swift.Int?, configurationDict: [Swift.String : WDCommon.AnyJSONType]?, challengeSecret: Swift.String?, challengeSecret2: Swift.String?)
  @objc deinit
}
public class WDGatewayManager : WatchmanSDK.WDBaseManager {
  public init(product: WatchmanSDK.WDProduct? = nil, delegate: WatchmanSDK.WDGatewayProtocol)
  public func setProduct(product: WatchmanSDK.WDProduct)
  public func getEnabledRelays()
  public func getEnabledDigitalInput()
  public func getEnabledMotor()
  public func getPowerMode()
  public func openAction()
  public func closeAction()
  public func relay1Action()
  public func relay2Action()
  public func motorAction()
  @objc deinit
}
public class WDAccessState : Swift.Codable {
  final public let id: Swift.Int?
  final public let key: Swift.String?
  public init(id: Swift.Int?, key: Swift.String?)
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  @objc deinit
}
extension String {
  public func toBase64() -> Swift.String
}
public class WGravityConfiguration : WDCommon.WGravityConfiguration {
  required public init(json: Swift.String)
  override public init(jsonDict: [Swift.String : WDCommon.AnyJSONType])
  override public init()
  override public init(autoClose: Swift.Bool, lockBoltAutomovements: Swift.Bool, moduleSwitch: Swift.Bool, alarmSwitch: Swift.Bool, vibTimeCheck: Swift.Int8, vibNumMin: Swift.Int8, vibSensitiveLevel: Swift.Int8, lightThreshold: Swift.Int, productType: WDCommon.PRODUCT_TYPE, autoOpen: Swift.Bool, autoCloseLowBattery: Swift.Bool)
  @objc deinit
}
public class WDAssetsManager : WatchmanSDK.WDBaseManager {
  public static var shared: WatchmanSDK.WDAssetsManager?
  public var delegate: WatchmanSDK.WDAssetsManagerDelegate?
  override public init()
  public init(delegate: WatchmanSDK.WDAssetsManagerDelegate)
  @available(*, deprecated, message: "Use new initializer public init(delegate: WDAssetsManagerDelegate)")
  public static func getSharedManager(withDelegate: WatchmanSDK.WDAssetsManagerDelegate) -> WatchmanSDK.WDAssetsManager
  public func getAssetInfo(fromIDs: [Swift.Int])
  public func getAssets(withName: Swift.String?, getHistoryAssets: Swift.Bool?, getForeignAssets: Swift.Bool?)
  public func getOfflineAssets(withSHA: Swift.String?)
  @objc deinit
}
public protocol WDConnectionDelegate {
  func WDDeviceConnected(deviceType: Swift.Int?, doorState: Swift.Int?, error: Swift.Int?)
  func WDDeviceDisconnected(error: Swift.Int?)
  func WDDoorStateNotification(state: Swift.Int?)
  func WDDoorDidChangedState(state: Swift.Int?, doorType: Swift.Int?, error: Swift.Int?)
  func WDProductTypeChanged(toType: Swift.Int?, error: Swift.Int?)
  func WDEcoButtonPeriodChanged(toPeriod: Swift.Int?, error: Swift.Int?)
  func WDWMotConfigChanged(toTime: Swift.Int?, andMode: Swift.Int?, error: Swift.Int?)
  func WDCoverageReported(withQuality: Swift.Int?, error: Swift.Int?)
  func WDProductActionDone(action: Swift.Int, error: Swift.Int?)
  func WDErrorReadingCharacteristic(characteristic: Swift.Int)
  func WDErrorWritingCharacteristic(characteristic: Swift.Int)
}
public class WDUsersManager : WatchmanSDK.WDBaseManager {
  public static var shared: WatchmanSDK.WDUsersManager?
  public var delegate: WatchmanSDK.WDUsersManagerDelegate?
  override public init()
  public init(delegate: WatchmanSDK.WDUsersManagerDelegate)
  @available(*, deprecated, message: "Use new initializer public init(delegate: WDUsersManagerDelegate)")
  public static func getSharedManager(withDelegate: WatchmanSDK.WDUsersManagerDelegate) -> WatchmanSDK.WDUsersManager
  public func getUserInfo()
  public func setUserDevice(withID: Swift.String)
  public func editUserInfo(withName: Swift.String, andLastName: Swift.String)
  public func getUserPermissions(list: [Swift.Int])
  @objc deinit
}
@objc public class WDPermission : ObjectiveC.NSObject {
  public static var admin: Swift.Int
  public static var editPromotions: Swift.Int
  public static var viewUsers: Swift.Int
  public static var production: Swift.Int
  public static var view: Swift.Int
  public static var projects: Swift.Int
  public static var imports: Swift.Int
  public static var editAddress: Swift.Int
  public static var viewAlerts: Swift.Int
  public static var clients: Swift.Int
  public static var viewPromotions: Swift.Int
  public static var editUsers: Swift.Int
  public static var viewAssets: Swift.Int
  public static var editAssets: Swift.Int
  public static var visitor: Swift.Int
  public static var editProduct: Swift.Int
  public static var viewLog: Swift.Int
  public static var installer: Swift.Int
  public static var assets: Swift.Int
  public static var webApp: Swift.Int
  public static var app: Swift.Int
  public static var exports: Swift.Int
  @objc override dynamic public init()
  @objc deinit
}
@objc public class WDError : ObjectiveC.NSObject {
  public static var UNAUTHORIZED_USER: Swift.Int
  public static var LOGIN_REQUIRED: Swift.Int
  public static var LOGIN_INVALID_CREDENTIALS: Swift.Int
  public static var LOGIN_INVALID_CLIENT: Swift.Int
  public static var LOGIN_INVALID_REQUEST: Swift.Int
  public static var PERIPHERAL_NIL: Swift.Int
  public static var BT_CENTRAL_MANAGER_NIL: Swift.Int
  public static var DEVICE_NOT_CONNECTED: Swift.Int
  public static var DEVICE_FIRMWARE_NOT_MATCHING: Swift.Int
  public static var DEVICE_LOW_BATTERY: Swift.Int
  public static var DEVICE_NOT_FOUND: Swift.Int
  public static var INVALID_PRODUCT_TYPE: Swift.Int
  public static var PROD_TYPE_NOT_ECO: Swift.Int
  public static var BTN_PERIOD_VALUE_INVALID: Swift.Int
  public static var INVALID_RELAY_TIME: Swift.Int
  public static var INVALID_RELAY_MODE: Swift.Int
  public static var PROD_TYPE_NOT_WMOT: Swift.Int
  public static var ERROR_GET_COVERAGE: Swift.Int
  public static var NO_PERMISSIONS_RESPONSE: Swift.Int
  public static var UPDATE_CONFIGURATION_ERROR: Swift.Int
  public static var CHALLENGE_PROCESS_ERROR: Swift.Int
  public static var EMPTY_DEVICE_ID: Swift.Int
  public static var NAME_LASTNAME_EMPTY: Swift.Int
  public static var PERMISSIONS_LIST_EMPTY: Swift.Int
  public static var ERROR_NO_TOKEN: Swift.Int
  public static var USER_INFO_NO_PROFILE: Swift.Int
  public static var USER_INFO_UNKNOWN_ERROR: Swift.Int
  public static var SET_DEVICE_UNKNOWN_ERROR: Swift.Int
  public static var OFFLINE_ASSETS_NO_SHA: Swift.Int
  public static var NO_OFFLINE_ASSETS: Swift.Int
  public static var ERROR_NO_ASSETS: Swift.Int
  public static var ERROR_NO_ASSETS_INFO: Swift.Int
  public static var OFFLINE_UNKNOWN_ERROR: Swift.Int
  public static var ASSETS_UNKNOWN_ERROR: Swift.Int
  public static var ASSETS_INFO_UNKNOWN_ERROR: Swift.Int
  public static var ERROR_DEVICE_CHANGED: Swift.Int
  public static var INSTALLER_RELAY_UNKNOWN_ERROR: Swift.Int
  public static var INSTALLER_RELAY_RESPONSE_NO_ERROR: Swift.Int
  public static var CHECKING_CLIENT_CR_UNKNOWN_ERROR: Swift.Int
  public static var CHECKING_CLIENT_CR_RESPONSE_NO_ERROR: Swift.Int
  public static var GET_COVERAGE_UNKNOWN_ERROR: Swift.Int
  public static var GET_COVERAGE_RESPONSE_NO_ERROR: Swift.Int
  public static var CHALLENGE_START_UNKNOWN_ERROR: Swift.Int
  public static var CHALLENGE_START_RESPONSE_NO_ERROR: Swift.Int
  public static var EDIT_USER_UNKNOWN_ERROR: Swift.Int
  public static var GATEWAY_PROD_NOT_FOUND: Swift.Int
  public static var GATEWAY_GENERIC_ERROR: Swift.Int
  public static var GATEWAY_ACTION_ERROR: Swift.Int
  public static var GATEWAY_UNKNOWN_CONFIG_ERROR: Swift.Int
  public static var GATEWAY_PRODUCT_NOT_SET_ERROR: Swift.Int
  public static var GATEWAY_WRONG_PRODUCT_TYPE_ERROR: Swift.Int
  public static var CONN_UNKNOWN_ERROR: Swift.Int
  public static var CONN_REQ_SHARED_CONTAINER: Swift.Int
  public static var CONN_SES_IN_USE: Swift.Int
  public static var CONN_SES_DISCONNECTED: Swift.Int
  public static var CONN_CANCELLED: Swift.Int
  public static var CONN_BAD_URL: Swift.Int
  public static var CONN_TIMED_OUT: Swift.Int
  public static var CONN_UNSUPPORTED_URL: Swift.Int
  public static var CONN_HOST_NOT_FOUND: Swift.Int
  public static var CONN_CANNOT_CONN_HOST: Swift.Int
  public static var CONN_LOST: Swift.Int
  public static var CONN_DNS_LOOKUP_FAILED: Swift.Int
  public static var CONN_TOO_MANY_REDIR: Swift.Int
  public static var CONN_RES_UNAVAILABLE: Swift.Int
  public static var CONN_NO_INTERNET: Swift.Int
  public static var CONN_REDIR_TO_NON_EXIST: Swift.Int
  public static var CONN_BAD_SERVER_RESP: Swift.Int
  public static var CONN_USR_CANCEL_AUTH: Swift.Int
  public static var CONN_USR_AUTH_REQ: Swift.Int
  public static var CONN_0_BYTE_RES: Swift.Int
  public static var CONN_CANNOT_DECODE_RAW: Swift.Int
  public static var CONN_CANNOT_DECODE_CONTENT: Swift.Int
  public static var CONN_CANNOT_PARSE_RESP: Swift.Int
  public static var CONN_INT_ROAMING_OFF: Swift.Int
  public static var CONN_CALL_IS_ACTIVE: Swift.Int
  public static var CONN_DATA_NOT_ALLOWED: Swift.Int
  public static var CONN_REQ_BODY_EXH: Swift.Int
  public static var CONN_REQ_SECURE_CONN: Swift.Int
  public static var CONN_SEQ_CONN_FAILED: Swift.Int
  public static var CONN_CERTIF_BAD_DATE: Swift.Int
  public static var CONN_CERTIF_UNTRUSTED: Swift.Int
  public static var CONN_CERTIF_UNKNOWN_ROOT: Swift.Int
  public static var CONN_CERTIF_NOT_YET_VALID: Swift.Int
  public static var CONN_CERTIF_REJECTED: Swift.Int
  public static var CONN_CERTIF_REQUIRED: Swift.Int
  @objc override dynamic public init()
  @objc deinit
}
public class WDColor {
  public static var authorizedNow: UIKit.UIColor
  public static var authorizedFuture: UIKit.UIColor
  public static var requested: UIKit.UIColor
  public static var denied: UIKit.UIColor
  @objc deinit
}
public class WEcoConfiguration : WDCommon.WEcoConfiguration {
  required public init(json: Swift.String)
  override public init(jsonDict: [Swift.String : WDCommon.AnyJSONType])
  override public init()
  override public init(buttonPeriod: Swift.Int?, productType: WDCommon.WEcoConfiguration.WECO_PROD_TYPE)
  @objc deinit
}
public class WDUser : Swift.Codable {
  final public let name: Swift.String?
  final public let lastName: Swift.String?
  final public let countryCode: Swift.String?
  final public let phone: Swift.String?
  final public let email: Swift.String?
  final public let foreignAssets: Swift.Bool?
  final public let canInstall: Swift.Bool?
  final public let isAcuda: Swift.Bool?
  final public let isAdecuador: Swift.Bool?
  final public let isOwner: Swift.Bool?
  final public let allowManualEntry: Swift.Bool?
  final public let allowProductEntry: Swift.Bool?
  @objc deinit
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public class WDProductType : Swift.Codable {
  final public let id: Swift.Int?
  final public let key: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  @objc deinit
  required public init(from decoder: Swift.Decoder) throws
}
public protocol WDAssetsManagerDelegate {
  func WDOfflineAssetsReceived(assets: [WatchmanSDK.WDAsset]?, sha: Swift.String?, error: Swift.Int?)
  func WDAssetsReceived(assets: [WatchmanSDK.WDAsset]?, error: Swift.Int?)
  func WDAssetsInfoReceived(assets: [WatchmanSDK.WDAsset]?, error: Swift.Int?)
}
public class WDTranslation : Swift.Codable {
  final public let ca: Swift.String?
  final public let en: Swift.String?
  final public let es: Swift.String?
  final public let fr: Swift.String?
  final public let it: Swift.String?
  required public init(from decoder: Swift.Decoder) throws
  public func getText() -> Swift.String
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
}
public class WKnobConfiguration : WDCommon.WKnobConfiguration {
  required public init(json: Swift.String)
  override public init(jsonDict: [Swift.String : WDCommon.AnyJSONType])
  override public init()
  override public init(isBuzzerOn: Swift.Bool, isNightModeOn: Swift.Bool, isSemiAutomaticModeOn: Swift.Bool, isMotorwayCCW: Swift.Bool, autoDisconnectionTime: Swift.Int32, latchHoldTime: Swift.Int32, secret: Swift.String, deviceId: Swift.String, deviceKey: Swift.String, counter: Swift.Int64, lockOneRound: Swift.Bool)
  @objc deinit
}
public protocol WDGatewayProtocol {
  func WDPowerMode(powerMode: WatchmanSDK.WDGATEWAY_POWER_MODE?, error: Swift.Int?)
  func WDActionDone(action: WatchmanSDK.WDPRODUCT_ACTION, error: Swift.Int?)
  func WDRelays(relays: [Swift.Bool]?, error: Swift.Int?)
  func WDMotor(motor: Swift.Bool?, error: Swift.Int?)
  func WDDigitalInput(digitalInput: Swift.Bool?, error: Swift.Int?)
}
public class WDProductData : Swift.Codable {
  public var id: Swift.Int?
  final public let name: Swift.String?
  final public let mac: Swift.String?
  final public let board_qr: Swift.String?
  final public let lock_qr: Swift.String?
  final public let front_qr: Swift.String?
  final public let asset_id: Swift.Int?
  final public let client_id: Swift.Int?
  final public let battery: Swift.Int?
  final public let uninstallation: Swift.Bool?
  public var configuration: WDCommon.DeviceConfiguration?
  final public let activeSim: Swift.Bool?
  final public let gprs_enabled: Swift.Bool?
  final public let gateway: WatchmanSDK.WDProductData?
  final public let gateway_id: Swift.Int?
  final public let product_type: WatchmanSDK.WDProductType?
  public init(id: Swift.Int?, name: Swift.String?, mac: Swift.String?, board_qr: Swift.String?, lock_qr: Swift.String?, front_qr: Swift.String?, asset_id: Swift.Int?, client_id: Swift.Int?, battery: Swift.Int?, uninstallation: Swift.Bool?, configuration: WDCommon.DeviceConfiguration?, activeSim: Swift.Bool?, gprs_enabled: Swift.Bool?, gateway: WatchmanSDK.WDProductData?, gateway_id: Swift.Int?, product_type: WatchmanSDK.WDProductType?)
  required public init(from decoder: Swift.Decoder) throws
  public func transformIntoWDProduct() -> WatchmanSDK.WDProduct
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
}
public enum WDGATEWAY_POWER_MODE {
  case BATTERY
  case AC
  public static func == (a: WatchmanSDK.WDGATEWAY_POWER_MODE, b: WatchmanSDK.WDGATEWAY_POWER_MODE) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public protocol WDLoginDelegate {
  func WDLoginResponse(loginOK: Swift.Bool, error: Swift.Int?)
  func WDUserClosedSession()
}
public enum RELAY_CONF : Swift.Int8 {
  case ONE
  case TWO
  public typealias RawValue = Swift.Int8
  public init?(rawValue: Swift.Int8)
  public var rawValue: Swift.Int8 {
    get
  }
}
public class WMotConfiguration : WDCommon.WMotConfiguration {
  required public init(json: Swift.String)
  required public init(jsonDict: [Swift.String : WDCommon.AnyJSONType])
  override public init()
  override public init(relayConfig: WDCommon.RELAY_CONF, seconds: [Swift.Int8] = super, actions: [Swift.String] = super)
  @objc deinit
}
@objc public class WDErrorParser : ObjectiveC.NSObject {
  public func parse(err: Swift.String) -> Swift.Int
  @objc override dynamic public init()
  @objc deinit
}
public class WDProductImage : Swift.Codable {
  final public let id: Swift.Int?
  final public let name: Swift.String?
  final public let title: Swift.String?
  required public init(id: Swift.Int?, name: Swift.String?, title: Swift.String?)
  @objc deinit
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public class WDBaseManager {
  public func addLog(text: Swift.String)
  public func setDebugMode(to: Swift.Bool)
  @objc deinit
}
public class WDAsset : Swift.Decodable {
  public var id: Swift.Int?
  @available(*, deprecated, message: "Property not in use. Will be deleted in next version")
  public var asset_type_id: Swift.String?
  public var client_id: Swift.Int?
  public var customer_id: Swift.Int?
  public var nif: Swift.String?
  public var name: Swift.String?
  public var description: WatchmanSDK.WDTranslation?
  @available(*, deprecated, renamed: "description")
  public var desc: [Swift.String : Swift.String]?
  public var meters: Swift.String?
  public var rooms: Swift.String?
  public var block: Swift.String?
  public var portal: Swift.String?
  public var stair: Swift.String?
  public var floor: Swift.String?
  public var door: Swift.String?
  public var lat: Swift.Double?
  public var lng: Swift.Double?
  public var productsCount: Swift.Int?
  public var asset_type: WatchmanSDK.WDAssetType?
  @available(*, deprecated, message: "Moved to asset_type property")
  public var at_id: Swift.Int?
  @available(*, deprecated, message: "Moved to asset_type property")
  public var at_key: Swift.String?
  @available(*, deprecated, message: "Moved to asset_type property")
  public var at_name: [Swift.String : Swift.String]?
  public var promotion: WatchmanSDK.WDPromotion?
  @available(*, deprecated, message: "Moved to promotion property")
  public var prom_id: Swift.Int?
  @available(*, deprecated, message: "Moved to promotion property")
  public var prom_name: Swift.String?
  @available(*, deprecated, message: "Moved to promotion property")
  public var prom_pc: Swift.String?
  @available(*, deprecated, message: "Moved to promotion property")
  public var prom_city: Swift.String?
  public var address: WatchmanSDK.WDAddress?
  @available(*, deprecated, message: "Moved to address property")
  public var add_id: Swift.Int?
  @available(*, deprecated, message: "Moved to address property")
  public var add_prov: Swift.String?
  @available(*, deprecated, message: "Moved to address property")
  public var add_city: Swift.String?
  @available(*, deprecated, message: "Moved to address property")
  public var add_stype: [Swift.String : Swift.String]?
  @available(*, deprecated, message: "Moved to address property")
  public var add_st: Swift.String?
  @available(*, deprecated, message: "Moved to address property")
  public var add_nr: Swift.String?
  @available(*, deprecated, message: "Moved to address property")
  public var add_km: Swift.String?
  @available(*, deprecated, message: "Moved to address property")
  public var add_lat: Swift.Double?
  @available(*, deprecated, message: "Moved to address property")
  public var add_lng: Swift.Double?
  @available(*, deprecated, message: "Moved to address property")
  public var add_pc: Swift.String?
  public var productsData: [WatchmanSDK.WDProductData]?
  public var products: [WatchmanSDK.WDProduct]
  public var images: [WatchmanSDK.WDProductImage]?
  public var accesses: [WatchmanSDK.WDAccess]?
  public init()
  required public init(from decoder: Swift.Decoder) throws
  @available(*, deprecated, renamed: "copy()")
  public func copyAsset(ass: WatchmanSDK.WDAsset) -> WatchmanSDK.WDAsset
  public func copy() -> WatchmanSDK.WDAsset
  @objc deinit
}
public protocol WDUsersManagerDelegate {
  func WDDeviceChanged(error: Swift.Int?)
  func WDUserInfoReceived(info: WatchmanSDK.WDUser?, error: Swift.Int?)
  @available(*, deprecated, message: "Use WDUserInfoReceived(info: WDUser?, error: Int?)")
  func WDUserInfoReceived(withData: [Swift.String : Any?]?, error: Swift.Int?)
  func WDUserEdited(error: Swift.Int?)
  func WDUserPermissionsReceived(list: [Swift.Int : Swift.Bool]?, error: Swift.Int?)
}
public enum WECO_TYPE : Swift.Int {
  case WECO
  case WOKU
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
public class WDAddress : Swift.Codable {
  final public let id: Swift.Int?
  final public let province: Swift.String?
  final public let city: Swift.String?
  final public let street: Swift.String?
  final public let number: Swift.String?
  final public let km: Swift.String?
  final public let postal_code: Swift.String?
  final public let lat: Swift.Double?
  final public let lng: Swift.Double?
  final public let street_type: WatchmanSDK.WDStreetType?
  @objc deinit
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public class WDPromotion : Swift.Codable {
  final public let id: Swift.Int?
  final public let name: Swift.String?
  final public let nif: Swift.String?
  final public let postal_code: Swift.String?
  final public let city: Swift.String?
  final public let woeid: Swift.String?
  @objc deinit
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public class WDConnectionManager : WatchmanSDK.WDBaseManager {
  public static var shared: WatchmanSDK.WDConnectionManager?
  public var delegate: WatchmanSDK.WDConnectionDelegate?
  override public init()
  public init(delegate: WatchmanSDK.WDConnectionDelegate)
  @available(*, deprecated, message: "Use new initializer public init(delegate: WDConnectionDelegate)")
  public static func getSharedManager(withDelegate: WatchmanSDK.WDConnectionDelegate) -> WatchmanSDK.WDConnectionManager
  public func connectTo(product: WatchmanSDK.WDProduct, asset: WatchmanSDK.WDAsset)
  public func disconnectFromProduct()
  public func openDoor()
  public func closeDoor()
  public func stopDoor()
  public func getProductType() -> Swift.Int?
  public func getEcoButtonPeriod() -> Swift.Int?
  public func getWMotRelayTime() -> Swift.Int?
  public func getWMotRelayMode() -> Swift.Int?
  public func getCoverage()
  @available(*, deprecated, message: "This function is not in use anymore")
  public func cancelCoverageRequest()
  public func changeEcoButtonPeriod(time: Swift.Int)
  public func changeWMotConfig(relTime: Swift.Int, mode: Swift.Int)
  public func changeProductType(to: Swift.Int)
  @objc deinit
}
@objc public class WDClient : ObjectiveC.NSObject {
  public var name: Swift.String
  public var id: Swift.Int
  @objc override dynamic public init()
  @objc deinit
}
public class WDAccess : Swift.Codable {
  public var id: Swift.Int?
  public var start: Swift.String?
  public var end: Swift.String?
  public var start_time: Swift.String?
  public var end_time: Swift.String?
  public var unlimited: Swift.Bool?
  @available(*, deprecated, message: "Moved to access_state property")
  public var as_id: Swift.Int?
  @available(*, deprecated, message: "Moved to access_state property")
  public var as_key: Swift.String?
  @available(*, deprecated, message: "Moved to access_state property")
  public var as_name: [Swift.String : Swift.String]
  public var access_state: WatchmanSDK.WDAccessState?
  @available(*, deprecated, message: "Moved to product property")
  public var prod_id: Swift.Int?
  public var product: WatchmanSDK.WDProductData?
  public init()
  public init(id: Swift.Int?, start: Swift.String?, end: Swift.String?, startTime: Swift.String?, endTime: Swift.String?, unlimited: Swift.Bool?, as_id: Swift.Int?, as_key: Swift.String?, as_name: [Swift.String : Swift.String]?, prod_id: Swift.Int?)
  public func newAccess(json: [Swift.String : Any]) -> WatchmanSDK.WDAccess
  public func calculateState(product: WatchmanSDK.WDProduct)
  @objc deinit
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public enum DOOR_STATE : Swift.Int {
  case INDET
  case CLOSE
  case OPEN
  case FORCED
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
public enum REGISTRY_TYPE : Swift.String {
  case ACCESS
  case CLOSING
  case CLOSING_ERROR
  case FORCED_DOOR
  case INSTALLATION
  case KEEP_ALIVE_LOST
  case OPENING
  case OPENING_ERROR
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public class WMot2Configuration : WDCommon.WMot2Configuration {
  required public init(json: Swift.String)
  required public init(jsonDict: [Swift.String : WDCommon.AnyJSONType])
  override public init()
  override public init(relays: [Swift.Int8], enabledRelays: [Swift.Bool], module: Swift.Bool, digitalInput: Swift.Bool, vibrationTime: Swift.Int8, vibrationNum: Swift.Int8, vibrationSensitive: Swift.Int8, motor: Swift.Bool, motorForward: Swift.Bool, motorForwardTime: Swift.Int, motorReverse: Swift.Bool, motorReverseTime: Swift.Int, powerMode: Swift.Int8)
  override public init(relays: [Swift.Int8], enabledRelays: [Swift.Bool], module: Swift.Bool, digitalInput: Swift.Bool, motor: Swift.Bool, motorForward: Swift.Bool, motorForwardTime: Swift.Int, motorReverse: Swift.Bool, motorReverseTime: Swift.Int, powerMode: Swift.Int8)
  @objc deinit
}
public class WDConfiguration : WDCommon.WDConfiguration {
  override required public init(json: Swift.String)
  override public init(jsonDict: [Swift.String : WDCommon.AnyJSONType])
  override public init()
  override public init(data: Foundation.Data)
  @objc deinit
}
